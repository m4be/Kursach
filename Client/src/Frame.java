import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;

public class Frame extends JFrame implements ActionListener {



    JTable table;
    DefaultTableModel model;

    private JPanel currentPanel;
    private JTextField name;
    private JTextField password;
    private JButton submitAuthorization;
    private JButton submitRegistration;
    private JButton submitAdmin;
    private JButton submitExit;

    private boolean authorized;
    private boolean admin;

    Frame() {
        int width = 720;
        int height = 600;
        this.setTitle("Course_Work");
        this.setSize(width, height);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.setLayout(null);


        this.add(Authorization());
        this.add(Menu());
        this.add(MainPanel());
        this.add(SubPanel());
        this.add(RefreshButton());

        this.setVisible(true);

        authorized = false;
        admin = false;
    }


    private JPanel Authorization(){
        JPanel panel = new JPanel();
        panel.setLayout(null);
        panel.setBorder(BorderFactory.createLineBorder(Color.BLACK,2));
        panel.setBounds(50,10,400,120);

        name = new JTextField();
        name.setBounds(150,5,220,30);

        password = new JTextField();
        password.setBounds(150,40,220,30);

        JLabel nameLabel = new JLabel("Name: ");
        nameLabel.setBounds(25,5,68,30);

        JLabel passwordLabel = new JLabel("Password: ");
        passwordLabel.setBounds(25,40,68,30);

        submitAuthorization = new JButton("Auth");
        submitAuthorization.setBounds(220,85,150,30);

        submitRegistration = new JButton("Register");
        submitRegistration.setBounds(25,85,150,30);

        submitRegistration.addActionListener(this);
        submitAuthorization.addActionListener(this);

        panel.add(name);
        panel.add(password);
        panel.add(nameLabel);
        panel.add(passwordLabel);
        panel.add(submitAuthorization);
        panel.add(submitRegistration);
        return panel;
    }

    private JPanel Menu(){
        JPanel panel = new JPanel();
        panel.setLayout(null);
        panel.setBorder(BorderFactory.createLineBorder(Color.BLACK,2));
        panel.setBounds(500,10,150,120);

        submitAdmin = new JButton("Admin");
        submitAdmin.setBounds(10,20,130,40);

        submitExit = new JButton("Exit");
        submitExit.setBounds(10,70,130,40);

        submitExit.addActionListener(this);
        submitAdmin.addActionListener(this);

        panel.add(submitAdmin);
        panel.add(submitExit);

        return panel;
    }

    private JPanel MainPanel(){
        JPanel panel = new JPanel();
        panel.setLayout(null);
        panel.setBorder(BorderFactory.createLineBorder(Color.BLACK,2));
        panel.setBounds(50,160,400,380);

/*        String[] columnNames = {"First Name", "Last Name", "Action"};
        Object[][] data =
                {
                        {"Homer", "Simpson", "delete Homer"},
                        {"Madge", "Simpson", "delete Madge"},
                        {"Bart",  "Simpson", "delete Bart"},
                        {"Lisa",  "Simpson", "delete Lisa"},
                };
*/
        model = new DefaultTableModel();
        table = new JTable( model );

        model.addColumn("ID");
        model.addColumn("Name");
        model.addColumn("Amount");
        model.addColumn("Action");


        JScrollPane scrollPane = new JScrollPane(table);
        table.setFillsViewportHeight(true);

        scrollPane.setBounds(0,0,400,380);


        Action delete = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                JTable table = (JTable)e.getSource();
                int modelRow = Integer.valueOf( e.getActionCommand() );

                System.out.println(modelRow);

                //model.setValueAt("1",modelRow,1);

                ((DefaultTableModel)table.getModel()).removeRow(modelRow);
            }
        };

        ButtonColumn buttonColumn = new ButtonColumn(table, delete, 3);
        buttonColumn.setMnemonic(KeyEvent.VK_D);

        panel.add(scrollPane);



        return panel;
    }

    private JPanel SubPanel(){
        JPanel panel = new JPanel();
        panel.setLayout(null);
        panel.setBorder(BorderFactory.createLineBorder(Color.BLACK,2));
        panel.setBounds(460,160,210,380);



        return panel;
    }

    private JButton RefreshButton(){
        JButton button = new JButton("Refresh");
        button.setLayout(null);
        button.setBorder(BorderFactory.createLineBorder(Color.BLACK,2));
        button.setBounds(390,135,60,20);
        button.addActionListener(this);

        return button;
    }

    void getServerMessage(String text){
        String[] str = text.split(" ");
        switch (str[0]){
            case "201":
                authorized = true;
                refresh();
                JOptionPane.showMessageDialog(this,"Authorization successful",
                        "Success", JOptionPane.INFORMATION_MESSAGE);
                break;
            case "301":
                JOptionPane.showMessageDialog(this,"Registration successful",
                        "Success", JOptionPane.INFORMATION_MESSAGE);
                break;

            case "401":
                admin = true;
                JOptionPane.showMessageDialog(this,"Admin successful",
                        "Success", JOptionPane.INFORMATION_MESSAGE);
                break;

            case "101":
                JOptionPane.showMessageDialog(this,"Account does not exist \nor incorrect input",
                        "Fail", JOptionPane.WARNING_MESSAGE);
                break;

            case "102":
                JOptionPane.showMessageDialog(this,"Account exist",
                        "Fail", JOptionPane.WARNING_MESSAGE);
                break;

            case "103":
                JOptionPane.showMessageDialog(this,"Admin account does not exist \nor incorrect input",
                        "Fail", JOptionPane.WARNING_MESSAGE);
                break;
            case "501":
                JOptionPane.showMessageDialog(this,"Exit successful",
                        "Success", JOptionPane.INFORMATION_MESSAGE);
                break;



            case "801":
                System.out.println("\n dlina:" + (str.length - 1) + "\n");//–£–±—Ä–∞—Ç—å!!!!!!!!
                model.setRowCount(0); //–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
                for(int i = 0; i < (((str.length) - 1) / 3);i++) // –ö–∞–∂–¥—ã–π 3 —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —Å—á–∏—Ç–∞—è –Ω—É–ª–µ–≤–æ–≥–æ
                    model.addRow(new Object[]{str[1+(3*i)],str[2+(3*i)],str[3+(3*i)],"take"}); //–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏



        }



    }

    void refresh(){
        if(authorized)
            new Sender("800", this);
        else{
            JOptionPane.showMessageDialog(this,"You are not authorized",
                    "Fail", JOptionPane.WARNING_MESSAGE);
        }
    }

    void exit(){
        authorized = false;
        admin = false;
        model.setRowCount(0);

    }

    boolean checkRegex(String name,String password){
        return (name.matches("\\w+") && password.matches("\\w+"));
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        System.out.println(e.getActionCommand());
        String regex = "Incorrect input \nOnly letters, numbers and underscore";
        String cmd = e.getActionCommand();
        switch (cmd){
            case "Auth":
                if(checkRegex(name.getText(),password.getText())){
                    new Sender("200 " + name.getText() + " " + password.getText(),this);
                }
                else{
                    JOptionPane.showMessageDialog(this,regex,
                            "Fail", JOptionPane.WARNING_MESSAGE);
                }
                break;
            case "Register":
                if(checkRegex(name.getText(),password.getText())){
                    new Sender("300 " + name.getText()+ " " + password.getText(),this);
                }
                else{
                    JOptionPane.showMessageDialog(this,regex,
                            "Fail", JOptionPane.WARNING_MESSAGE);
                }
                break;
            case "Admin":
                if(checkRegex(name.getText(),password.getText())){
                    new Sender("400 " + name.getText()+ " " + password.getText(),this);
                }
                else{
                    JOptionPane.showMessageDialog(this,regex,
                            "Fail", JOptionPane.WARNING_MESSAGE);
                }

                break;
            case "Exit":
                new Sender("500",this);
                exit();
                break;
            case "Refresh":
                refresh();
                break;

        }
    }


    /*
    –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤:
    200 - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è    201 - –£—Å–ø–µ—à–Ω–æ     üÜó
    300 - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è    301 - –£—Å–ø–µ—à–Ω–æ     üÜó
    400 - –ê–¥–º–∏–Ω          401 - –£—Å–ø–µ—à–Ω–æ     üÜó
    500 - –í—ã—Ö–æ–¥ –∏–∑ —É—á–µ—Ç–∫–∏ 501 - –ü—Ä–∏–Ω—è—Ç–æ    üÜó

    –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∑–∞–π—Ç–∏ —Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è Authorized == true üÜó

    (–ò –Ω–∞–≤–µ—Ä–Ω–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–º–µ–Ω–∏ (—á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —É—á–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ê—Ç–æ –ø–æ–Ω–∞–ø–∏—à–µ—Ç –≥–æ–≤–Ω–∞ )))

    –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ == false üÜó

    –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è False => –Ω–∞ —Å–∞–º–æ–π —Ñ–æ—Ä–º–µ –≤—ã—Å–∫–∞–∫–∏–≤–∞–µ—Ç –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –±–¥ (–¢–∞–±–ª–∏—Ü–∞) üÜó

    –ï—Å–ª–∏ –ê–¥–º–∏–Ω - —Ç–æ –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ (–î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    Admin == true üÜó

    –°–¥–µ–ª–∞—Ç—å —Ñ–∞–π–ª –î–ï–∫–æ–¥–µ—Ä (–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)

    101 - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å (–ù–µ—Ç —Ç–∞–∫–æ–π —É—á–µ—Ç–∫–∏) üÜó
    102 - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å (–¢–∞–∫–∞—è —É—á–µ—Ç–∫–∞ —É–∂–µ –µ—Å—Ç—å) üÜó
    103 - –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É –Ω–µ —É–¥–∞–ª—Å—è (–ù–µ—Ç —Ç–∞–∫–æ–π —É—á–µ—Ç–∫–∏) üÜó

    –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏

    –ü–æ—Å–ª–µ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã—Å–≤–µ—á–∏–≤–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –≤—Å–µ–π —Ç–µ—Ö–Ω–∏–∫–∏(—É –ê–¥–º–∏–Ω–∞ —Ç–æ–∂–µ)
    –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–∞–Ω–µ–ª–∏ —Å–ø—Ä–∞–≤–∞ –ï–ì–û –∑–∞–∫–∞–∑—ã
    –£ –ê–¥–º–∏–Ω–∞ –ó–ê–ö–ê–ó–´ –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô

    + –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π

    600 - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ—Ö–Ω–∏–∫—É (ID)
    700 - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –£–¥–∞–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏–∫—É –∏—Ö —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤

    601 - –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–∞–∑–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É(–ù–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ <1)



    800 - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–ó–ê–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä—É) üÜó
    801 - –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—É—Å–ø–µ—Ö) (–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é) üÜó

    –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è

    900 - –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω—É–∂–Ω—ã–º —Ñ–ª–∞–≥–æ–º authorized/admin
    901 - –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    902 - –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É
    903 - –ù–µ —É–¥–∞—á–Ω–æ

    (–û—Ç–ø—Ä–∞–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–∞—à–∏–Ω (—Ç.–µ. –∏–∑ –ë–î))
    + –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–∞–Ω—ã—Ö/–∞–¥–º–∏–Ω –º–∞—à–∏–Ω

    –°–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ª–∏–±–æ –æ—à–∏–±–∫—É
    –õ–∏–±–æ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    //(–ë—Ä–µ–¥)–ö–ù–û–ü–ö–ê == if Admin then –∫–Ω–æ–ø–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç

    !!!!! –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤—Å—è —Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

    */
}